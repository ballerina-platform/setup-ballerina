name: 'Setup Ballerina Language'
description: 'Install Ballerina `bal` command'
branding:
  icon: 'archive'  
  color: 'green'
inputs:
  version:
    description: "Ballerina Version"
    required: true
    default: 2201.9.2
  github-token:
    description: 'GitHub token'
    default: ${{ github.token }}
    required: false

runs:
  using: "composite"
  steps:
    - name: Configure version
      id: configure-version
      run: |
        if [[ ${{ inputs.version }} == 'latest' ]]; then
          BALLERINA_VERSION=$(echo $(curl -X GET 'https://api.central.ballerina.io/2.0/update-tool/distributions/latest?version=2201.0.0') | sed -n 's/.*"major":"\([^"]*\)".*/\1/p')
        else
          BALLERINA_VERSION=${{ inputs.version }}
        fi
        echo "::set-output name=version::$BALLERINA_VERSION"
        echo BALLERINA_VERSION=$BALLERINA_VERSION >> $GITHUB_ENV
      shell: bash

    - name: Cache Restore
      id: cache-dist
      uses: actions/cache@v3
      with:
        path: |
          ballerina-${{ steps.configure-version.outputs.version }}-*.*
        key: ballerina-${{ steps.configure-version.outputs.version }}-${{ runner.os }}

    - name: Download Ballerina installer
      if: steps.cache-dist.outputs.cache-hit != 'true'
      run: |
        set -x
        GITHUB_TOKEN=${{ inputs.github-token }}
        if [[ $OSTYPE == 'msys'* ]]; then
          echo "Windows runner detected"
          if [[ $BALLERINA_VERSION =~ ^nightly ]]; then
            DAILY_BUILD_VERSION=${BALLERINA_VERSION//nightly/daily-build}
            echo "Using nightly build"
            ARTIFACT_NAME="Windows Installer msi"
            GITHUB_RUN_ID=$(curl -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/ballerina-platform/ballerina-distribution/actions/workflows/$DAILY_BUILD_VERSION.yml/runs?status=success&per_page=1" | jq '.workflow_runs[0].id')
            DOWNLOAD_URL=$(curl -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/ballerina-platform/ballerina-distribution/actions/runs/$GITHUB_RUN_ID/artifacts" | jq -r --arg name "$ARTIFACT_NAME" '.artifacts[] | select(.name == $name) | .archive_download_url')
            curl -H "Authorization: token $GITHUB_TOKEN" \
            -L -o artifact.zip $DOWNLOAD_URL
            unzip -q artifact.zip
          else
            curl -L -S -s https://dist.ballerina.io/downloads/${{ steps.configure-version.outputs.version }}/ballerina-${{ steps.configure-version.outputs.version }}-swan-lake-windows-x64.msi --output ballerina-${{ inputs.version }}-swan-lake-windows-x64.msi
          fi
        elif [[ $OSTYPE == 'darwin'* ]]; then
          echo "MacOS runner detected"
          if [[ $BALLERINA_VERSION =~ ^nightly ]]; then
            DAILY_BUILD_VERSION=${BALLERINA_VERSION//nightly/daily-build}
            echo "Using nightly build"
            ARTIFACT_NAME="MacOS Installer pkg"
            GITHUB_RUN_ID=$(curl -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/ballerina-platform/ballerina-distribution/actions/workflows/$DAILY_BUILD_VERSION.yml/runs?status=success&per_page=1" | jq '.workflow_runs[0].id')
            DOWNLOAD_URL=$(curl -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/ballerina-platform/ballerina-distribution/actions/runs/$GITHUB_RUN_ID/artifacts" | jq -r --arg name "$ARTIFACT_NAME" '.artifacts[] | select(.name == $name) | .archive_download_url')
            curl -H "Authorization: token $GITHUB_TOKEN" \
            -L -o artifact.zip $DOWNLOAD_URL
            unzip -q artifact.zip 
          else
            wget -q https://dist.ballerina.io/downloads/${{ steps.configure-version.outputs.version }}/ballerina-${{ steps.configure-version.outputs.version }}-swan-lake-macos-x64.pkg
          fi
        else
          echo "Ubuntu runner detected"
          if [[ $BALLERINA_VERSION =~ ^nightly ]]; then
            DAILY_BUILD_VERSION=${BALLERINA_VERSION//nightly/daily-build}
            echo "Using nightly build"
            ARTIFACT_NAME="Linux Installer deb"
            GITHUB_RUN_ID=$(curl -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/ballerina-platform/ballerina-distribution/actions/workflows/$DAILY_BUILD_VERSION.yml/runs?status=success&per_page=1" | jq '.workflow_runs[0].id')
            DOWNLOAD_URL=$(curl -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/ballerina-platform/ballerina-distribution/actions/runs/$GITHUB_RUN_ID/artifacts" | jq -r --arg name "$ARTIFACT_NAME" '.artifacts[] | select(.name == $name) | .archive_download_url')
            curl -H "Authorization: token $GITHUB_TOKEN" \
            -L -o artifact.zip $DOWNLOAD_URL
            unzip -q artifact.zip
          else
            wget -q https://dist.ballerina.io/downloads/${{ steps.configure-version.outputs.version }}/ballerina-${{ steps.configure-version.outputs.version }}-swan-lake-linux-x64.deb
          fi
        fi
      shell: bash

    - name: Install Ballerina
      run: |
        set -x
        if [[ $OSTYPE == 'msys'* ]]; then
          echo "windows runner detected"
          INSTALLER_PATH=$(dir ballerina-*-windows-x64.msi)
          msiexec //i $INSTALLER_PATH //qn
          echo "BALLERINA_HOME=C:\\Program Files\\Ballerina\\" >> $GITHUB_ENV
          powershell ${GITHUB_ACTION_PATH}/updatepath.ps1
        elif [[ $OSTYPE == 'darwin'* ]]; then
          echo "macos runner detected"
          INSTALLER_PATH=$(ls ./ballerina-*-macos-x64.pkg)
          sudo installer -pkg $INSTALLER_PATH -target /Library
          echo "BALLERINA_HOME=/Library/Ballerina" >> $GITHUB_ENV
          echo "/Library/Ballerina/bin" >> $GITHUB_PATH
        else
          echo "ubuntu runner detected" 
          INSTALLER_PATH=$(ls ./ballerina-*-linux-x64.deb)
          if [ "$(id --user)" -eq "0" ]; then
            sudocmd=""
          else
            sudocmd="sudo"
          fi
          $sudocmd dpkg -i $INSTALLER_PATH
          echo "BALLERINA_HOME=/usr/lib/ballerina" >> $GITHUB_ENV
          echo "/usr/lib/ballerina/bin" >> $GITHUB_PATH
        fi
      shell: bash

    - name: Remove downloaded files
      run: |
        set -x
        rm -f ballerina-*-windows-x64.msi
        rm -f ballerina-*-macos-x64.pkg
        rm -f ballerina-*-linux-x64.deb
        rm -f artifact.zip
      shell: bash
